# CodeWhisperer pre block. Keep at the top of this file.
[[ -f "${HOME}/Library/Application Support/codewhisperer/shell/zshrc.pre.zsh" ]] && builtin source "${HOME}/Library/Application Support/codewhisperer/shell/zshrc.pre.zsh"
export ZSH="$HOME/.oh-my-zsh"
export TERM='xterm-256color'
export DISPLAY=':0'
export TERMINAL='tmux'
export EDITOR='hx'

ENABLE_CORRECTION="true"
COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
COMPLETION_WAITING_DOTS="true"
HIST_STAMPS="mm/dd/yyyy"

plugins=(zsh-autosuggestions git zsh-z sudo copypath 
	web-search copyfile copybuffer jsontools macos zsh-syntax-highlighting)

ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=7"
source $ZSH/oh-my-zsh.sh

tmux_kill() {
  if read -q '?exiting tmux? (y/n) ?'; then
  tmux kill-server
fi
}

_staging_supplychain_playbook_completions() {
    local -a playbooks
    playbooks=($(find /Users/roger/Documents/supplychain/staging-supplychain/supplychain/playbooks -path '*/roles/*' -prune -o -name '*.yml' -print | \
                sed -e 's|/Users/roger/Documents/supplychain/staging-supplychain/supplychain/playbooks/||' -e 's/\.yml$//' ))
    _describe 'playbook' playbooks
}


_staging_supplychain_host_completions() {
    local -a groups hosts
    # Extract group names
    groups=($(awk '/^[a-zA-Z0-9_-]+:$/{if($1 !~ /vars:|children:|hosts:/) print substr($1, 1, length($1)-1)}' /Users/roger/Documents/supplychain/staging-supplychain/production.yml))
    # Extract host names
    hosts=($(awk '/ansible_host/{print host} {host=""} /^[a-zA-Z0-9_-]+:/{host=$1}' /Users/roger/Documents/supplychain/staging-supplychain/production.yml | sed 's/:$//'))
    _describe 'group/host' groups hosts
}

_staging_supplychain_completions() {
    local cur_cword="$#words"

    if (( cur_cword == 2 )); then
        _staging_supplychain_playbook_completions
    elif (( cur_cword > 2 )); then
        _staging_supplychain_host_completions
    fi
}

compdef _staging_supplychain_completions staging-supplychain

source ~/.zsh_aliases

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

export PATH="/Users/rogersiver/Applications/git-fuzzy/bin:$PATH"

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

eval $(thefuck --alias)
eval "$(mcfly init zsh)"
eval "$(starship init zsh)"
eval "$(pyenv init -)"
eval "$(logcli --completion-script-zsh)"

source /Users/roger/.config/broot/launcher/bash/br

export PATH=$PATH:/Users/roger/.local/bin
export PATH=$PATH:$HOME/go/bin

export PYENV_ROOT="$HOME/.pyenv"
command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"

function tree-git-ignore {
    # tree respecting gitignore

    local ignored=$(git ls-files -ci --others --directory --exclude-standard)
    local ignored_filter=$(echo "$ignored" \
                    | egrep -v "^#.*$|^[[:space:]]*$" \
                    | sed 's~^/~~' \
                    | sed 's~/$~~' \
                    | tr "\\n" "|")
    tree --prune -I ".git|${ignored_filter: : -1}" "$@"
}

clear
export PATH="/opt/homebrew/opt/net-snmp/bin:$PATH"
export PATH="/opt/homebrew/opt/net-snmp/sbin:$PATH"

# CodeWhisperer post block. Keep at the bottom of this file.
[[ -f "${HOME}/Library/Application Support/codewhisperer/shell/zshrc.post.zsh" ]] && builtin source "${HOME}/Library/Application Support/codewhisperer/shell/zshrc.post.zsh"

# The next line updates PATH for the Google Cloud SDK.
# if [ -f '/Users/roger/Downloads/google-cloud-sdk/path.zsh.inc' ]; then . '/Users/roger/Downloads/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
# if [ -f '/Users/roger/Downloads/google-cloud-sdk/completion.zsh.inc' ]; then . '/Users/roger/Downloads/google-cloud-sdk/completion.zsh.inc'; fi

export AWS_PROFILE=""
export AWS_REGION=""

function ya() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXX")"
	yazi "$@" --cwd-file="$tmp"
	if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
		cd -- "$cwd"
	fi
	rm -f -- "$tmp"
}
